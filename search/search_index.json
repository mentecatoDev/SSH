{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"1 Introducci\u00f3n 1.1 Contenidos Introducci\u00f3n Instalaci\u00f3n y configuraci\u00f3n inicial Utilizaci\u00f3n de ssh Configuraci\u00f3n de ssh Transferencia de ficheros T\u00faneles ssh Utilizaci\u00f3n desde windows 1.2 Pr\u00e1cticas Utilizaci\u00f3n simple de ssh Gesti\u00f3n de pares de claves Acceso remoto con clave p\u00fablica/privada Uso de frase de paso en la clave privada Uso de ssh-agent Configuraci\u00f3n del cliente ssh para m\u00faltiples entornos Uso de la funcionalidad de forwarding T\u00faneles ssh 1.3 \u00bfQu\u00e9 voy a saber? Que ssh es imprescindible, sencillo y muy potente Que con un poco de configuraci\u00f3n se puede agilizar mucho la forma de trabajar Que Arqu\u00edmedes hubiese dicho: \u201cDame acceso por ssh y controlar\u00e9 el mundo\u201d 1.4 Caracter\u00edsticas principales 1.4.1 telnet , rlogin y rsh Shell remota Remote login: rlogin Remote shell: rsh Ejecuci\u00f3n remota de instrucciones Muy utilizado desde los a\u00f1os 70 Autenticaci\u00f3n no cifrada La seguridad no era una preocupaci\u00f3n 1.4.2 Cifrado Completo Se cifra todo el proceso, tanto la autenticaci\u00f3n como toda la comunicaci\u00f3n 1.4.3 Historia de ssh En 1995, Tatu Yl\u00f6nen crea ssh Posteriormente funda SSH Communications Security (ssh.com) En 1999 se desarrolla OpenSSH 1.4.4 OpenSSH Desarrollado en OpenBSD Escrito en C Licencia BSD simple, dominio p\u00fablico Ampliamente extendida Utilizada en BSD, GNU/Linux y UNIX Se apoya en el proyecto LibreSSL (Fork de OpenSSL tras heartbleed ) OpenSSL es la biblioteca de seguridad en comunicaciones que utilizaba openssh Programas ssh , scp , sftp , ssh-keygen , ssh-agent , sshd , ssh-keyscan Versiones SSH-1 SSH-2 incompatible con SSH-1. Incluye importantes mejoras: D-H para intercambiar claves Verificaci\u00f3n de integridad mediante Message authentication code (MAC) M\u00faltiples sesiones en una conexi\u00f3n Actualmente s\u00f3lo se usa SSH-2 1.5 Criptograf\u00eda Arte y t\u00e9cnica de escribir con procedimientos o claves secretas o de un modo enigm\u00e1tico, de tal forma que lo escrito solamente sea inteligible para quien sepa descifrarlo. En castellano son sin\u00f3nimos cifrar y encriptar, as\u00ed como las acciones inversas descifrar y desencriptar. 1.5.1 Criptograf\u00eda de clave sim\u00e9trica Se utiliza la misma clave para cifrar y descifrar Algoritmos: DES 3DES IDEA Blowfish CAST5 AES (Rijndael) Mecanismo \u00e1mpliamente utilizado Principal limitaci\u00f3n: Comunicaci\u00f3n de la clave 1.5.2 Clave asim\u00e9trica o de clave p\u00fablica Se crean dos claves relacionadas clave privada clave p\u00fablica La privada descifra lo cifrado por la p\u00fablica y al contrario Evita el problema del cifrado sim\u00e9trico Limitaciones M\u00e1s complejo Menos algoritmos disponibles Funcionamiento: idea (International Data Encryption Algorithm) Algoritmos Factorizaci\u00f3n de n\u00fameros primos (antiguos) RSA (Antes protegido por patente ahora caducada) DSA Curvas el\u00edpticas (modernos: m\u00e1s r\u00e1pidos) ECDSA Ed25519 1.5.3 Funciones Hash Operaciones matem\u00e1ticas con las siguientes propiedades: - Mismo tama\u00f1o de resultado Unidireccionales No muestran informaci\u00f3n del origen Difieren con cualquier modificaci\u00f3n del origen Funciones hash habituales CRC, MD5, Whirpool, Tiger, SHA-1, SHA-256, SHA-512, SHA-3 1.6 M\u00e9todos de autenticaci\u00f3n 1.6.1 Contrase\u00f1a M\u00e9todo b\u00e1sico Usamos la contrase\u00f1a del usuario en el sistema remoto 1.6.2 Clave p\u00fablica El usuario genera un par de claves p\u00fablica/privada Ubica la clave p\u00fablica en el equipo remoto Accede a su sesi\u00f3n sin contrase\u00f1a 1.6.3 Kerberos Principalmente en entornos corporativos Se solicita un ticket al servidor kerberos Kerberos proporciona SSO ( Single Sign-On sesi\u00f3n de inicio \u00fanica) Permite comunicarse con cualquier servidor ssh kerberizado 1.6.4 GSSAPI Biblioteca API 1.7 \u00bfC\u00f3mo funciona ssh ? 1.7.1 Fase 1.- Negociaci\u00f3n El cliente se conecta al servidor El servidor muestra su versi\u00f3n de ssh El cliente muestra su versi\u00f3n de ssh El servidor env\u00eda su clave p\u00fablica El cliente verifica la huella de la clave p\u00fablica entre las que tiene guardadas Negocian qu\u00e9 algoritmo y semilla utilizar Ambos generan las claves de la sesi\u00f3n e intercambian la p\u00fablica para verificar que la otra parte lo ha hecho igual 1.7.2 Fase 2.- Autenticaci\u00f3n Una vez establecida la clave de sesi\u00f3n se utiliza para cifrar toda la comunicaci\u00f3n El servidor ofrece en orden los m\u00e9todos de autenticaci\u00f3n disponibles El cliente los rechaza hasta que encuentra uno a utilizar Cuando el usuario se ha autenticado satisfactoriamente se abre una sesi\u00f3n en el equipo remoto 2 Instalaci\u00f3n del entorno de pruebas Habitualmente los equipos con alguna variedad de GNU/Linux traen un servidor ssh instalado, en el caso de los sistemas Debian y derivados el paquete que proporciona el servidor ssh se llama openssh-server . Podemos comprobar si ya est\u00e1 instalado mediante la instrucci\u00f3n: dpkg -l | grep openssh-server o si est\u00e1 en marcha con systemctl status sshd o con ps ps aux | grep sshd o bien comprobando la escucha sobre el puerto 22 con ss -lntp En caso de no estarlo, podemos instalarlo con: sudo apt-get install openssh-server \u00f3 en Arch con pacman -S openssh El fichero de configuraci\u00f3n de este servicio se encuentra habitualmente en /etc/ssh/sshd_config y contiene las opciones de configuraci\u00f3n. Las opciones aplicadas las obtendr\u00edamos mediante: grep -v '^$\\|^#' /etc/ssh/sshd_config ChallengeResponseAuthentication no UsePAM yes X11Forwarding yes PrintMotd no AcceptEnv LANG LC_* Subsystem sftp /usr/lib/openssh/sftp-server Sin embargo, en el caso de ssh hay muchas opciones que no vienen definidas y que se asume un valor por defecto, lo que puede resultar confuso. Sin embargo podemos utilizar la opci\u00f3n -T: extended test mode que comprueba la validez del fichero de configuraci\u00f3n y muestra las opciones efectivas que se aplican (las que est\u00e1n habilitadas de forma expl\u00edcita y las que tienen valores por defecto (en sistemas GNU/linux sshd s\u00f3lo puede ejecutarlo un usuario privilegiado): sshd -T ... port 22 addressfamily any listenaddress [::]:22 listenaddress 0.0.0.0:22 usepam yes logingracetime 120 x11displayoffset 10 maxauthtries 6 maxsessions 10 clientaliveinterval 120 clientalivecountmax 3 streamlocalbindmask 0177 permitrootlogin without-password ignorerhosts yes ignoreuserknownhosts no hostbasedauthentication no hostbasedusesnamefrompacketonly no pubkeyauthentication yes kerberosauthentication no kerberosorlocalpasswd yes kerberosticketcleanup yes gssapiauthentication no gssapikeyexchange no gssapicleanupcredentials yes gssapistrictacceptorcheck yes gssapistorecredentialsonrekey no passwordauthentication yes kbdinteractiveauthentication no challengeresponseauthentication no printmotd no printlastlog yes x11forwarding yes x11uselocalhost yes permittty yes permituserrc yes strictmodes yes tcpkeepalive yes permitemptypasswords no permituserenvironment no compression yes gatewayports no usedns no allowtcpforwarding yes allowagentforwarding yes disableforwarding no allowstreamlocalforwarding yes streamlocalbindunlink no useprivilegeseparation sandbox fingerprinthash SHA256 pidfile /run/sshd.pid xauthlocation /usr/bin/xauth ciphers chacha20-poly1305@openssh.com,aes128-ctr, ... macs umac-64-etm@openssh.com,umac-128-etm@openssh.com, ... versionaddendum none kexalgorithms curve25519-sha256,curve25519-sha256@libssh.org, ... hostbasedacceptedkeytypes ecdsa-sha2-nistp256-cert-v01@openssh.com, ... hostkeyalgorithms ecdsa-sha2-nistp256-cert-v01@openssh.com, ... pubkeyacceptedkeytypes ecdsa-sha2-nistp256-cert-v01@openssh.com, ... loglevel INFO syslogfacility AUTH authorizedkeysfile .ssh/authorized_keys .ssh/authorized_keys2 hostkey /etc/ssh/ssh_host_rsa_key hostkey /etc/ssh/ssh_host_ecdsa_key hostkey /etc/ssh/ssh_host_ed25519_key acceptenv LANG acceptenv LC_* authenticationmethods any subsystem sftp /usr/lib/openssh/sftp-server maxstartups 10:30:100 permittunnel no ipqos lowdelay throughput rekeylimit 0 0 permitopen any Muchas m\u00e1quinas vienen con un servidor ssh que s\u00f3lo permite acceder con clave p\u00fablica, por lo que no funciona inicialmente si nos intentamos conectar con usuario/contrase\u00f1a. Para poder hacerlo se debe descomentar el siguiente par\u00e1metro del fichero de configuraci\u00f3n /etc/ssh/sshd_config : PasswordAuthentication yes Y reiniciar el servidor ssh con: systemctl restart ssh 3 Utilizaci\u00f3n de ssh 3.1 Autenticaci\u00f3n con usuario y contrase\u00f1a El m\u00e9todo inicial de autenticaci\u00f3n se basa en utilizar los usuarios del sistema y sus contrase\u00f1as que est\u00e1n almacenadas en \u00e9l. A SSH no le afecta la forma en la que el sistema las almacena (fichero, LDAP, etc.). Las opciones de configuraci\u00f3n que afectan en este caso son las siguientes: passwordauthentication yes|no challengeresponseauthentication yes|no permitemptypasswords yes|no Te\u00f3ricamente challengeresponseauthentication es un mecanismo m\u00e1s complejo que permite preguntar al usuario otras cuestiones, no s\u00f3lo la contrase\u00f1a, pero en la pr\u00e1ctica se suele preguntar la contrase\u00f1a. En sistemas GNU/Linux se a\u00f1ade la opci\u00f3n usepam yes Que permite utilizar el subsistema PAM como mecanismo de autenticaci\u00f3n. 3.1.1 Ejercicio simple de acceso con usuario/contrase\u00f1a Accedemos a un servidor remoto con: ssh usuario@172.22.200.175 The authenticity of host '172.22.200.175 (172.22.200.175)' can't be established. ECDSA key fingerprint is SHA256:Bsv9OS7Qf94ANguOiDLNPHn7J+XlwisWZydmfqa4QMo. Are you sure you want to continue connecting (yes/no)? Para verificar el servidor, en lugar de mostrarnos la clave p\u00fablica completa, nos muestra la huella (fingerprint) de la clave p\u00fablica del servidor, que no es m\u00e1s que un hash de la clave p\u00fablica, en este caso utlizando SHA256. Podemos comprobar la correspondencia entre la clave p\u00fablica y la huella mediante la instrucci\u00f3n: ssh-keygen -l -E sha256 -f fichero_con_clave_publica Se podr\u00eda hablar con detalle de la forma efectiva de verificar las claves p\u00fablicas, pero en este momento se aceptar\u00e1 la clave que se ofrece y por tanto se teclear\u00e1 \u201cyes\u201d y a continuaci\u00f3n se pide la contrase\u00f1a de acceso, se introduce y se accede a una shell en el equipo remoto: Warning: Permanently added '172.22.200.175' (ECDSA) to the list of known hosts. usuario@172.22.200.175's password: ********** Last login: Fri Feb 16 17:34:41 2018 from 172.23.0.22 usuario@host:~$ 3.1.2 Ejecuci\u00f3n remota SSH permite ejecutar una orden remotamente de forma no interactiva, lo que resulta muy c\u00f3modo cuando hay que realizar tareas muy espec\u00edficas en un equipo remoto. Por ejemplo: ssh usuario@172.22.200.175 sudo apt update Tambi\u00e9n se pueden encadenar varias \u00f3rdenes o ejecutar un script: ssh usuario@172.22.200.175 'sudo apt update && sudo apt upgrade' 3.1.3 Consideraciones acerca de root Se puede restringir el acceso con el usuario root utilizando contrase\u00f1a, aspecto importante desde el punto de vista de seguridad, por lo que hoy en d\u00eda habitualmente se utiliza la opcion: PermitRootLogin without-password En caso de que quisi\u00e9ramos permitir acceder con el usuario root y contrase\u00f1a, deber\u00edamos poner esta opci\u00f3n a yes. 3.1.4 Otras opciones No espec\u00edficas del acceso con usuario y contrase\u00f1a, pero adecuadas para empezar: PrintLastLog yes|no PrintMotd yes|no Banner Ruta_a_fichero 3.2 Autenticaci\u00f3n con claves p\u00fablica/privada Aunque el mecanismo m\u00e1s f\u00e1cil de entender al utilizar ssh es la autenticaci\u00f3n del usuario mediante la contrase\u00f1a en el equipo remoto, el mecanismo m\u00e1s \u201cnatural\u201d y probablemente m\u00e1s habitual es la autenticaci\u00f3n mediante un par de claves p\u00fablica/privada. 3.2.1 Creaci\u00f3n de la clave privada Para crear la clave privada utilizaremos la herramienta ssh-keygen , especificando el algoritmo que deseamos utilizar mediante el par\u00e1metro -t (dsa | ecdsa | ed25519 | rsa | rsa1), por ejemplo: ssh-keygen -t ecdsa Se crear\u00e1 un di\u00e1logo mediante el cual nos pedir\u00e1 una frase de paso para proteger la clave privada, paso que se ignorar\u00e1 de momento y se explicar\u00e1 con detalle en la siguiente secci\u00f3n: Generating public/private ecdsa key pair. Enter file in which to save the key (/home/alberto/.ssh/id_ecdsa): [ENTER] Enter passphrase (empty for no passphrase): [ENTER] Enter same passphrase again: [ENTER] Your identification has been saved in /home/alberto/.ssh/id_ecdsa. Your public key has been saved in /home/alberto/.ssh/id_ecdsa.pub. The key fingerprint is: SHA256:QQ0bm3FBXKhLyWUfa7teeHgufwLPdK8nIu0UlMCJ6/M alberto@mut The key's randomart image is: +---[ECDSA 256]---+ | =B==. | | ..BO... | | .=* .oo | | *. .+ | | oS. ... | | + o+. .| | o .+*+..| | E.=== +| | +o++* | +----[SHA256]-----+ En este caso hemos optado por dejar el nombre de la clave por defecto (~/.ssh/idecdsa). Si vamos al directorio ~/.ssh veremos que existen dos nuevos ficheros, que se corresponden con la clave p\u00fablica y la privada: -rw------- 1 alberto alberto 227 feb 18 09:16 id_ecdsa -rw-r--r-- 1 alberto alberto 173 feb 18 09:16 id_ecdsa.pub L\u00f3gicamente la clave privada se ha protegido en el sistema de forma que s\u00f3lo el propietario puede leerla o modificarla, mientras que la p\u00fablica puede leerla cualquier usuario y en general podr\u00e1 estar accesible en cualquier sitio sin restricciones, ya que no es posible obtener la clave privada a partir de ella. Vemos el contenido de estas claves (obviamente se muestran aqu\u00ed a modo de ejemplo y se trata de claves que no se van a utilizar nunca en un entorno real): ~/.ssh/id_ecdsa -----BEGIN EC PRIVATE KEY----- MHcCAQEEIN53r8/ghcQ94wjNPtvz0VvSFsuU7ePsPkriWPhpC137oAoGCCqGSM49 AwEHoUQDQgAEXJKU4yRlIdnKGG8qQA2PXpfCPVz9xpbB3TXOh9ymC9XtjgP3ZCwU tdNnLTQNJm8PO4MHtFZBTxeFE39lD7WVYQ== -----END EC PRIVATE KEY----- ~/.ssh/id_ecdsa.pub ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAy\\ NTYAAABBBFySlOMkZSHZyhhvKkANj16Xwj1c/caWwd01zofcpgvV7Y4D92QsFLXT\\ Zy00DSZvDzuDB7RWQU8XhRN/ZQ+1lWE= alberto@mut 3.2.2 Copia de la clave p\u00fablica en el equipo remoto Para que se pueda utilizar este mecanismo de autenticaci\u00f3n es preciso que la clave p\u00fablica del usuario se encuentre en la cuenta que \u00e9ste posee en el equipo remoto, de forma m\u00e1s concreta, dentro del fichero ~/.ssh/authorized_keys , por lo que debemos utilizar alg\u00fan m\u00e9todo para ubicarla all\u00ed: Accedemos con contrase\u00f1a y copiamos y pegamos la clave p\u00fablica Accedemos con otra clave p\u00fablica que hubi\u00e9semos copiado previamente y pegamos la nueva clave p\u00fablica Utilizamos cualquier sistema en el arranque de la m\u00e1quina que obtenga la clave p\u00fablica y la ubique en su sitio (muy habitual en cloud computing) Utilizamos la herramienta ssh-copy-id Vamos a ver el \u00faltimo m\u00e9todo: ssh-copy-id -i ~/.ssh/id_ecdsa debian@172.22.200.175 /usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: \"/home/alberto/.ssh/id_ecdsa.pub\" /usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed /usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys debian@172.22.200.175's password: Number of key(s) added: 1 Now try logging into the machine, with: \"ssh 'debian@172.22.200.175'\" and check to make sure that only the key(s) you wanted were added. Si accedemos al equipo remoto, podremos comprobar que la clave p\u00fablica que hemos exportado se encuentra en el fichero ~/.ssh/authorized_keys . 3.2.3 Clave privada con nombre no est\u00e1ndar En el caso anterior hemos creado un par de claves con nombre est\u00e1ndar ( idecdsa e idecdsa.pub ), pero es posible definir cualquier nombre a la hora de crear el par de claves, por ejemplo: ssh-keygen -t ed25519 Generating public/private ed25519 key pair. Enter file in which to save the key (/home/debian/.ssh/id_ed25519): openwebinars Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in openwebinars. Your public key has been saved in openwebinars.pub. The key fingerprint is: SHA256:HzEVg7wVelxLpuHrv+BUG8QG4bI0AsED7PnUvzFdlCI debian@asd The key's randomart image is: +--[ED25519 256]--+ | ..oo. . .O++. | | . o. E*oXo. | | . . o. B+*o= | | o . .o.B +. | | o S.o...o | | . .+o.. o | | .++ . | | .o o | | . o. | +----[SHA256]-----+ Proceder\u00edamos de igual forma que en el caso anterior, aunque ahora para utilizar la clave en cualquier sesi\u00f3n ssh , deber\u00edamos indicarlo de forma expl\u00edcita: ssh -i ~/.ssh/openwebinars debian@172.22.200.175 3.2.4 Utilizaci\u00f3n en cloud computing Hoy en d\u00eda es cada vez m\u00e1s habitual la utilizaci\u00f3n de m\u00e1quinas virtuales en alg\u00fan proveedor de nube de infraestructura p\u00fablica o privada (AWS, Azure, OpenStack, etc.), en estos casos es imprescindible utilizar este mecanismo de clave p\u00fablica/privada para acceder a estas m\u00e1quinas virtuales. 3.2.5 Generaci\u00f3n de una clave p\u00fablica a partir de la privada Aunque habitualmente se generan ambas claves, en diferentes circunstancias puede ocurrir que tengamos la clave privada, pero no la correspondiente clave p\u00fablica, en ese caso podemos utilizar ssh-keygen para obtenerla: ssh-keygen -y -f clave >> clave.pub Evidentemente si tenemos la clave p\u00fablica y no la privada, no podemos hacer el proceso inverso. 3.2.6 Utilizaci\u00f3n en procesos no interactivos Puesto que teniendo acceso a la clave privada el acceso se puede realizar al equipo remoto sin ninguna intervenci\u00f3n, este mecanismo es ideal para su utilizaci\u00f3n en procesos que no requieran intervenci\u00f3n humana, como muchas conexiones que pueden realizarse entre diferentes equipos. La conexi\u00f3n es segura y autenticada, aunque es muy importante custodiar adecuadamente las claves privadas. 3.3 Autenticaci\u00f3n con claves p\u00fablica/privada y frase de paso La autenticaci\u00f3n con clave privada tiene importantes ventajas respecto al acceso con contrase\u00f1a, pero tiene el inconveniente de la custodia de la clave privada. Cualquier usuario que obtuviese nuestra clave privada podr\u00eda entrar en nuestra cuenta de cualquier equipo en el que tuvi\u00e9semos exportada la correspondiente clave p\u00fablica. Para aumentar la seguridad en esta situaci\u00f3n se utiliza una frase de paso para proteger la clave privada, frase que se introduce al crear la clave privada o que puede modificarse a posteriori. Vamos a crear una nueva clave, pero en este caso protegida con frase de paso: ssh-keygen -t ecdsa Generating public/private ecdsa key pair. Enter file in which to save the key (/home/alberto/.ssh/id_ecdsa): Enter passphrase (empty for no passphrase): <- Teclear frase de paso -> Enter same passphrase again: <- Teclear frase de paso de nuevo -> Your identification has been saved in /home/alberto/.ssh/id_ecdsa. Your public key has been saved in /home/alberto/.ssh/id_ecdsa.pub. The key fingerprint is: SHA256:mvCLrZMvdUDOorOkvd/1iosAZmhGS2fWPQmjAVMjjtk alberto@mut The key's randomart image is: +---[ECDSA 256]---+ | +o+ o | |ooo = = . | |o+E= = + | |+ = . + . | |o* ... .S | |=.+ o.o. | | +.o o+.. | |. o.+= + . | | .o==B.... | +----[SHA256]-----+ De esta forma la clave privada no es \u00fatil a menos que se conozca la frase de paso. Procedemos de igual forma que en el caso anterior, exportando la clave p\u00fablica, aunque ahora cada vez que accedamos nos solicitar\u00e1 la frase de paso de la clave privada: ssh -i ~/.ssh/id_ecdsa debian@172.22.200.175 Enter passphrase for key '/home/alberto/.ssh/id_ecdsa': Hemos ganado en seguridad, pero hemos perdido en usabilidad, porque ahora tenemos que escribir la frase de paso cada vez que accedamos al equipo remoto y adem\u00e1s no es v\u00e1lido para procesos no interactivos. Para solucionar este inconveniente usaremos ssh-agent en una secci\u00f3n posterior. 3.4 ssh-agent ssh-agent es un programa que permite almacenar las claves privadas de una sesi\u00f3n y es muy \u00fatil cuando usamos claves con frase de paso, ya que podemos a\u00f1adir la clave privada al agente ssh y s\u00f3lo tendremos que poner la frase de paso una vez, permitiendo utilizar ssh de forma transparente sin volver a introducir la frase de paso todo el tiempo que dure la sesi\u00f3n del usuario (realmente se puede limitar a una cantidad de tiempo menor si se desea). ssh-agent se suele ejecutar autom\u00e1ticamente en las sesiones gr\u00e1ficas de los sistemas, como podemos verificar mediante: env |grep SSH ... SSH_AUTH_SOCK=/run/user/1001/keyring/ssh SSH_AGENT_PID=2743 O a trav\u00e9s de ps: ps aux |grep ssh-agent alberto 2743 .... ..... 0:00 /usr/bin/ssh-agent x-session-manager De hecho, si tuvi\u00e9ramos alguna clave privada sin frase de paso se habr\u00eda cargado autom\u00e1ticamente en el agente ssh y podr\u00edamos utilizarla de forma totalmente transparente. 3.4.1 A\u00f1adir una clave privada a ssh-agent Mediante la herramienta ssh-add podemos a\u00f1adir una clave al agente ssh, por ejemplo: ssh-add ~/.ssh/openwebinars Si la clave est\u00e1 protegida por una frase de paso, se nos pedir\u00e1 en ese momento, o se utilizar\u00e1 la aplicaci\u00f3n ssh-askpass si se tratase de una aplicaci\u00f3n gr\u00e1fica u otra que no tuviese asociada una terminal. Podemos ver las claves cargadas mediante: ssh-add -L Y sus huellas con: ssh-add -l ssh-agent permite que cualquier otra aplicaci\u00f3n de la misma sesi\u00f3n utilice las claves privadas que almacena sin tener que volver a autenticarse, por lo que es importante controlar el uso de la sesi\u00f3n, bloque\u00e1ndola cuando no se est\u00e9 usando. Se pueden eliminar claves ssh del agente mediante: ssh-add -d openwebinars O incluso eliminar todas las claves con: ssh-add -D 3.4.2 Ejecuci\u00f3n de ssh-agent En el caso de que utilicemos un sistema que no haya cargado autom\u00e1ticamente un agente ssh, podemos ejecutarlo directamente, habitualmente se har\u00eda abriendo una nueva shell: ssh-agent /bin/bash 3.5 Gesti\u00f3n de ficheros: authorized_keys y known_hosts 3.5.1 Fichero ~/.ssh/authorized_keys Se almacenan las claves p\u00fablicas de los usuarios que pueden acceder a esta cuenta mediante clave p\u00fablica/clave privada, el formato es: <algoritmo> <clavepublica> <comentario> Por ejemplo: ssh-rsa AAAAB3NzaC1yc2EAA\u2026dPh alberto@mut Si queremos que utilizar un par de claves para acceder a un equipo, debemos asegurarnos de que exista la clave p\u00fablica en este fichero y cuando ya dejemos de utilizarla debemos borrar la l\u00ednea correspondiente. Fichero ~/.ssh/knownhosts Se almacenan las claves p\u00fablicas de todos los equipos remotos a los que nos hemos conectado y que hemos aceptado, el formato es: <nombre o IP equipo> <algoritmo> <clavep\u00fablica> Actualmente es m\u00e1s habitual que no se guarde el nombre o direcci\u00f3n IP del equipo en claro, sino que se almacene el hash. Para encontrar un determinado equipo por nombre o direcci\u00f3n IP podemos utilizar la instrucci\u00f3n: ssh-keygen -F 172.22.200.175 1 lbA\u2026.9Lo= ecdsa-sha2-nistp256 AAAA\u2026..ynTO90= Cambio de clave p\u00fablica del servidor Habitualmente se almacenan las claves p\u00fablicas de los servidores a los que nos hemos conectado previamente en el fichero ~/.ssh/knownhosts, por lo que se verifica cada vez que se conecta que el servidor ofrece la misma clave p\u00fablica. En caso de que no coincida veremos el siguiente mensaje: ssh debian@172.22.200.175 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY! Someone could be eavesdropping on you right now (man-in-the-middle attack)! It is also possible that a host key has just been changed. The fingerprint for the ECDSA key sent by the remote host is SHA256:J9CMWSbavkqECRI1KWhy8s/D7UVJWDiysAocAbo1F6k. Please contact your system administrator. Add correct host key in home/alberto.ssh/knownhosts to get rid of this message. Offending ECDSA key in home/alberto.ssh/knownhosts:88 remove with: ssh-keygen -f \"home/alberto.ssh/knownhosts\" -R 172.22.200.175 ECDSA host key for 172.22.200.175 has changed and you have requested strict checking. Host key verification failed. Es posible que se trate de una suplantaci\u00f3n y por tanto un problema de seguridad, pero tambi\u00e9n es posible que se haya realizado un cambio en el servidor que haya implicado un cambio en las claves del servicio ssh o una situaci\u00f3n muy habitual hoy en d\u00eda: estamos reutilizando la misma IP para un nuevo servidor. En caso de que estemos seguros de que no hay ning\u00fan problema de seguridad al acceder a ese equipo remoto, debemos eliminar la antigua clave asociada a la direcci\u00f3n IP (o al nombre), mediante la instrucci\u00f3n: ssh-keygen -R 172.22.200.175 home/alberto.ssh/knownhosts updated. Original contents retained as home/alberto.ssh/knownhosts.old 3.5.2 Fichero ~/.ssh/authorized_keys Almacena las claves p\u00fablicas de los usuarios que pueden acceder a esta cuenta mediante clave p\u00fablica/clave privada, el formato es: <algoritmo> <clave_publica> <comentario> Por ejemplo: ssh-rsa AAAAB3NzaC1yc2EAA...dPh alberto@mut Si queremos utilizar un par de claves para acceder a un equipo, debemos asegurarnos de que exista la clave p\u00fablica en este fichero y cuando ya dejemos de utilizarla debemos borrar la l\u00ednea correspondiente. 3.5.3 Fichero ~/.ssh/knownhosts Almacena las claves p\u00fablicas de todos los equipos remotos a los que nos hemos conectado y que hemos aceptado, el formato es: nombre_o_IP_equipo algoritmo clave_p\u00fablica Actualmente es m\u00e1s habitual que no se guarde el nombre o direcci\u00f3n IP del equipo en claro, sino que se almacene el hash. Para encontrar un determinado equipo por nombre o direcci\u00f3n IP podemos utilizar la instrucci\u00f3n: ssh-keygen -F 172.22.200.175 #Host 172.22.200.175 found: line 88 |1|lbA....9Lo= ecdsa-sha2-nistp256 AAAA.....ynTO90= 3.5.4 Cambio de clave p\u00fablica del servidor Habitualmente se almacenan las claves p\u00fablicas de los servidores a los que nos hemos conectado previamente en el fichero ~/.ssh/known_hosts, por lo que se verifica, cada vez que se conecta, que el servidor ofrece la misma clave p\u00fablica. En caso de que no coincida veremos el siguiente mensaje: ssh debian@172.22.200.175 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY! Someone could be eavesdropping on you right now (man-in-the-middle attack)! It is also possible that a host key has just been changed. The fingerprint for the ECDSA key sent by the remote host is SHA256:J9CMWSbavkqECRI1KWhy8s/D7UVJWDiysAocAbo1F6k. Please contact your system administrator. Add correct host key in /home/alberto/.ssh/known_hosts to get rid of this message. Offending ECDSA key in /home/alberto/.ssh/known_hosts:88 remove with: ssh-keygen -f \"/home/alberto/.ssh/known_hosts\" -R 172.22.200.175 ECDSA host key for 172.22.200.175 has changed and you have requested strict checking. Host key verification failed. Es posible que se trate de una suplantaci\u00f3n y por tanto un problema de seguridad, pero tambi\u00e9n es posible que se haya realizado un cambio en el servidor que haya implicado un cambio en las claves del servicio ssh o una situaci\u00f3n muy habitual hoy en d\u00eda: estamos reutilizando la misma IP para un nuevo servidor. En caso de que estemos seguros de que no hay ning\u00fan problema de seguridad al acceder a ese equipo remoto, debemos eliminar la antigua clave asociada a la direcci\u00f3n IP (o al nombre), mediante la instrucci\u00f3n: ssh-keygen -R 172.22.200.175 #Host 172.22.200.175 found: line 88 /home/alberto/.ssh/known_hosts updated. Original contents retained as /home/alberto/.ssh/known_hosts.old 3.6 Forwarding 3.6.1 Agent forwarding Mediante esta t\u00e9cnica, es posible que el cliente ssh se comunique con un agente ssh que corre un una m\u00e1quina remota y sin necesidad de poner las claves privadas en \u00e9l, poder saltar a otro equipo remoto no accesible directamente. Es una t\u00e9cnica muy \u00fatil que permite no exponer directamente los servidores a los que realmente queremos acceder mediante ssh, sino que accedemos a ellos de forma transparente usando un equipo a modo de basti\u00f3n. Esta posibilidad debe estar habilitada en el servidor intermedio mediante la directiva: allowagentforwarding yes Que est\u00e1 habilitada por defecto. En el cliente es necesario habilitar el par\u00e1metro: ForwardAgent yes 3.6.2 X11 forwarding A trav\u00e9s de la t\u00e9cnica de X11 forwarding podemos ver en nuestra pantalla aplicaciones gr\u00e1ficas que se ejecutan a trav\u00e9s de ssh en un equipo remoto (y viceversa). Aunque en primer lugar tiene que estar permitido en el servidor a trav\u00e9s de las directivas: X11Forwarding yes X11DisplayOffset 10 El cliente para conectarse y utilizar esta funcionalidad, deber\u00e1 configurar adicionalmente la opci\u00f3n: ForwardX11 yes Al conectarnos por ssh podremos comprobar que est\u00e1 definida la variable DISPLAY con un valor definido a trav\u00e9s de la variable X11DisplayOffset, por ejemplo: env |grep DISPLAY DISPLAY=localhost:10 Al ejecutar una aplicaci\u00f3n en el equipo remoto sobre la conexi\u00f3n ssh nos aparecer\u00e1 en nuestra pantalla. Ampliaci\u00f3n 4 Configuraci\u00f3n de ssh 4.1 Configuraci\u00f3n del cliente ssh Existe el fichero /etc/ssh/ssh_config en el que se especifican los par\u00e1metros de configuraci\u00f3n generales que van a utilizar por defecto todos los clientes ssh que se ejecuten en esa m\u00e1quina. Los posibles par\u00e1metros que podemos definir en ese fichero se detallan en la p\u00e1gina 5 del manual de ssh_config . Algunos par\u00e1metros significativos 4.1.1 SendEnv LANG LC_* Mediante este par\u00e1metro se define en el equipo remoto los par\u00e1metros de localizaci\u00f3n del cliente, siempre que estos est\u00e9n definidos all\u00ed. Por ejemplo, supongamos que la variable local sea LANG=es.ES.UTF-8 , seguir\u00e1 siendo en el equipo remoto siempre que exista, en caso contrario se pondr\u00e1 la localizaci\u00f3n por defecto del sistema: usuario@cliente:~$ echo $LANG es_ES.UTF-8 usuario@cliente:~$ ssh root@servidor1 The programs included with the Debian GNU/Linux system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. No mail. Last login: Thu Feb 22 10:06:47 2018 from ... root@servidor1:~# echo $LANG en_US.UTF-8 4.1.2 HashKnownHosts yes|no Para ofuscar mediante un hash la IP o el nombre de los servidores de los que almacenamos las claves p\u00fablicas en el fichero ~/.ssh/known_hosts 4.1.3 GSSAPIAuthentication yes|no Para habilitar este m\u00e9todo de autenticaci\u00f3n, en sistemas Debian viene habilitado, aunque s\u00f3lo es necesario en los casos en los que se vaya a usar este m\u00e9todo de autenticaci\u00f3n. 4.1.4 Car\u00e1cter de escape En algunas ocasiones podemos tener problemas con nuestra conexi\u00f3n ssh y que la shell remota no responda a las instrucciones que mandamos, en esos casos siempre se podr\u00e1 cerrar la conexi\u00f3n mediante el car\u00e1cter de escape que hayamos definido en nuestro cliente ssh, este caracter por defecto es \u201c~\u201d: EscapeChar ~ Para ejecutarlo escribir\u00edamos la secuencia \u201c~\u201d. 4.1.5 ForwardAgent , ForwardX11 Explicados en la secci\u00f3n espec\u00edfica de forwarding 4.1.6 GlobalKnownHostsFile <fichero> Permite la utilizaci\u00f3n de un fichero knownhosts para todos los usuarios de un equipo. 4.1.7 NumberOfPasswordPrompts N\u00famero de intentos de acceso con contrase\u00f1a. Por defecto es 3 4.1.8 StrictHostKeyChecking yes|ask|no Par\u00e1metro muy importante, utiliza para la gesti\u00f3n de las claves p\u00fablicas de los equipos remotos. La opci\u00f3n por defecto es \u201cask\u201d, de manera que si no se ha almacenado previamente la clave p\u00fablica se pregunta qu\u00e9 hacer. En el caso de ponerla en \u201cyes\u201d, se rechazar\u00e1 una conexi\u00f3n si no existe previamente la clave p\u00fablica y en caso de optar por la opci\u00f3n \u201cno\u201d, no se har\u00e1 ninguna verificaci\u00f3n. 4.1.9 UserKnownHostsFile fichero Fichero knownhosts de usuario, por defecto ~/.ssh/knownhosts 4.1.10 Configuraci\u00f3n por usuario Salvo algunos par\u00e1metros generales, es poco probable que la mayor\u00eda de los par\u00e1metros que se pueden definir para el cliente ssh sean \u00fatiles para todos los usuarios de un equipo, es mucho m\u00e1s habitual que un usuario defina un fichero de configuraci\u00f3n con sus propios par\u00e1metros. Este fichero es ~/.ssh/config y los par\u00e1metros aqu\u00ed definidos prevalecen sobre los generales. Se pueden definir par\u00e1metros para todos los equipos remotos, pero es tambi\u00e9n muy \u00fatil agruparlos con el par\u00e1metro Host como en el siguiente ejemplo: GSSAPIAuthentication no Host 192.168.1.1 User root Port 2022 ForwardAgent yes Identityfile ~/.ssh/id_ecdsa StrictHostKeyChecking yes Host *.example.com StrictHostKeyChecking no UserKnownHostsFile=/dev/null LogLevel QUIET 4.1.11 Utilizar par\u00e1metros directamente Independientemente de los par\u00e1metros que est\u00e9n definidos en cualquiera de las opciones anteriores, tambi\u00e9n es posible utilizar par\u00e1metros de forma expl\u00edcita en la propia l\u00ednea de comandos, pas\u00e1ndolos mediante el modificador \u201c-o\u201d, por ejemplo: ssh -o \"ForwardAgent yes\" usuario@172.22.200.175 4.2 Configuraci\u00f3n del servidor ssh Tal como vimos en la instalaci\u00f3n y configuraci\u00f3n elemental del servidor ssh, podemos ver las opciones de configuraci\u00f3n que se aplican a nuestro servidor mediante: sshd -T |less Vamos a comentar algunas que pueden ser interesantes porque se modifican con cierta frecuencia. 4.2.1 Port 22 Puerto tcp en el que va a escuchar peticiones el servidor ssh, por defecto es el 22/tcp, pero puede cambiarse sin problema. 4.2.2 AddressFamily any|inet|inet6 El protocolo o protocolos de red a utilizar, puede ser inet(IPv4), inet6 (IPv6) o any(ambos) que es la opci\u00f3n por defecto. 4.2.3 ListenAddress Si queremos especificar que se permitan conexiones s\u00f3lo a trav\u00e9s de una direcci\u00f3n IP concreta (IPv4/IPv6). 4.2.4 logingracetime , maxauthtries y maxsessions Para especificar el tiempo que se espera para que el usuario se acceda con \u00e9xito al sistema, el n\u00famero m\u00e1ximo de veces que puede introducir la contrase\u00f1a y el n\u00famero m\u00e1ximo de sesiones en la misma conexi\u00f3n. 4.2.5 loglevel y syslogfacility Para controlar el nivel de detalle que mostrar en los logs del sistema, as\u00ed como la \u201cfacility\u201d a utilizar. 4.2.6 hostkey Fichero o ficheros que especifican la clave o claves privadas a utilizar por el servidor. 5 Transferencia de ficheros a trav\u00e9s de ssh 5.1 Utilizaci\u00f3n de scp El cliente ssh incluye tambi\u00e9n el comando scp que permite copiar ficheros entre entre equipos mediante ssh y hacerlo de forma equivalente a la utilizaci\u00f3n local del cl\u00e1sico comando cp . No es necesario que el equipo origen o destino sea el equipo desde el que se ejecuta scp , tanto origen como destino pueden ser equipos a los que pueda acceder el usuario utilizando ssh. La sintaxis general de scp es: scp [[user@]host1:]file1 [[user@]host2:]file2 5.1.1 Transferir un fichero local a un equipo remoto scp /etc/resolv.conf usuario@172.22.200.175:resolv.conf.local El fichero remoto quedar\u00e1 como /home/usuario/resolv.conf.local ya que : indica el punto de acceso al equipo (/home/usuario/ en este caso) Transferir un fichero desde un equipo remoto a mi equipo local scp root@172.22.200.175:/etc/shadow . Que guardar\u00eda el fichero /etc/shadow del equipo remoto con el nombre shadow en el directorio en el que nos encontramos 5.1.2 Transferir un fichero entre dos equipos remotos scp root@172.22.200.175:/etc/hosts root@172.22.200.176:/etc/hosts Esta opci\u00f3n es muy potente y permite crear sencillos scripts para unificar configuraciones, por ejemplo imaginemos que queremos tener la misma configuraci\u00f3n DNS en un conjunto de servidores, podr\u00edamos hacerlo de forma sencilla y potente con ssh mediante el siguiente script: #!/bin/bash for i in `seq 1 100`; do scp root@servidor1:/etc/resolv.conf 192.168.1.$i:/etc/resolv.conf done 5.1.3 Bonus track Si utilizamos pares de claves en las conexiones, scp autocompleta el fichero origen o destino utilizando el doble tabulador. 5.2 Utilizaci\u00f3n de sftp Al igual que scp , sftp permite transferir ficheros entre equipos remotos a trav\u00e9s de SSH, aunque su principal diferencia es que sftp permite utilizarlo de una forma interactiva, al igual que el tradicional ftp, incluyendo los mismos comandos que \u00e9ste. scp es mucho m\u00e1s habitual utilizarlo desde l\u00ednea de comandos, mientras que sftp se puede utilizar bien desde la l\u00ednea de comandos o a trav\u00e9s de uno de los m\u00faltiples clientes ftp que lo soportan. Es importante no confundir sftp (ssh ftp) con ftps que es una extensi\u00f3n del protocolo ftp a\u00f1adiendo ssl para el cifrado de la conexi\u00f3n. 6 T\u00faneles SSH Esta t\u00e9cnica, tambi\u00e9n conocida como TCP forwarding o port forwarding, permite utilizar cualquier aplicaci\u00f3n de forma segura a trav\u00e9s de una conexi\u00f3n ssh (de ah\u00ed la utilizaci\u00f3n del t\u00e9rmino t\u00fanel). 6.1 Local forwarding Desde nuestra m\u00e1quina queremos acceder a un servicio, pero este servicio o bien no es accesible (por ejemplo por un cortafuegos que lo impide), o no es seguro hacerlo desde nuestra m\u00e1quina, pero tenemos acceso a otro equipo a trav\u00e9s de ssh y desde ese equipo s\u00ed podemos acceder al servicio que queremos o es seguro hacerlo. Vamos a verlo con un ejemplo: Queremos enviar un correo desde nuestro servidor de la empresa (puerto 25/tcp), pero estamos fuera y no queremos conectarnos de forma insegura, por lo que establecemos un t\u00fanel ssh de la siguiente forma: ssh -f -L 1025:smtp.example.com:25 remoto.example.com -N Esto abrir\u00e1 el puerto 1025/tcp en nuestra m\u00e1quina que podremos utilizar de forma segura para enviar correo, ya que se pasar\u00e1 a trav\u00e9s de ssh al equipo remoto.example.com y de ah\u00ed al servidor smtp.example.com. 6.2 Remote forwarding Supongamos el caso contrario, en el que queremos que una m\u00e1quina remota utilice un servicio de nuestra m\u00e1quina, pero o bien no es accesible de forma directa o bien no es seguro hacerlo, por lo que podr\u00edamos definir una conexi\u00f3n ssh para realizarlo como la siguiente: ssh -f -L 8080:localhost:80 remoto.example.com -N De esa manera desde el equipo remoto, quien acceda al puerto 8080/tcp estar\u00e1 accediendo al puerto 80/tcp de nuestra m\u00e1quina a trav\u00e9s de un t\u00fanel ssh. La directiva GatewayPorts yes|no limita el puerto 8080 del caso anterior a que se pueda acceder s\u00f3lo desde el propio equipo remoto, o bien desde cualquier equipo. 6.3 Forwarding din\u00e1mico Mediante este mecanismo, lo que hacemos es crear un servidor SOCKS en nuestro equipo, que permite utilizar desde nuestra m\u00e1quina cualquier cliente que soporte este mecanismo, en particular un navegador web. Definir\u00edamos un servidor socks local que sale a trav\u00e9s de un t\u00fanel ssh con un equipo remoto de la siguiente forma: ssh -D 8080 -f -C -q -N remote.example.com","title":"1 Introducci\u00f3n"},{"location":"#1-introduccion","text":"","title":"1 Introducci\u00f3n"},{"location":"#11-contenidos","text":"Introducci\u00f3n Instalaci\u00f3n y configuraci\u00f3n inicial Utilizaci\u00f3n de ssh Configuraci\u00f3n de ssh Transferencia de ficheros T\u00faneles ssh Utilizaci\u00f3n desde windows","title":"1.1 Contenidos"},{"location":"#12-practicas","text":"Utilizaci\u00f3n simple de ssh Gesti\u00f3n de pares de claves Acceso remoto con clave p\u00fablica/privada Uso de frase de paso en la clave privada Uso de ssh-agent Configuraci\u00f3n del cliente ssh para m\u00faltiples entornos Uso de la funcionalidad de forwarding T\u00faneles ssh","title":"1.2 Pr\u00e1cticas"},{"location":"#13-que-voy-a-saber","text":"Que ssh es imprescindible, sencillo y muy potente Que con un poco de configuraci\u00f3n se puede agilizar mucho la forma de trabajar Que Arqu\u00edmedes hubiese dicho: \u201cDame acceso por ssh y controlar\u00e9 el mundo\u201d","title":"1.3 \u00bfQu\u00e9 voy a saber?"},{"location":"#14-caracteristicas-principales","text":"","title":"1.4 Caracter\u00edsticas principales"},{"location":"#141-telnet-rlogin-y-rsh","text":"Shell remota Remote login: rlogin Remote shell: rsh Ejecuci\u00f3n remota de instrucciones Muy utilizado desde los a\u00f1os 70 Autenticaci\u00f3n no cifrada La seguridad no era una preocupaci\u00f3n","title":"1.4.1 telnet, rlogin y rsh"},{"location":"#142-cifrado-completo","text":"Se cifra todo el proceso, tanto la autenticaci\u00f3n como toda la comunicaci\u00f3n","title":"1.4.2 Cifrado Completo"},{"location":"#143-historia-de-ssh","text":"En 1995, Tatu Yl\u00f6nen crea ssh Posteriormente funda SSH Communications Security (ssh.com) En 1999 se desarrolla OpenSSH","title":"1.4.3 Historia de ssh"},{"location":"#144-openssh","text":"Desarrollado en OpenBSD Escrito en C Licencia BSD simple, dominio p\u00fablico Ampliamente extendida Utilizada en BSD, GNU/Linux y UNIX Se apoya en el proyecto LibreSSL (Fork de OpenSSL tras heartbleed ) OpenSSL es la biblioteca de seguridad en comunicaciones que utilizaba openssh Programas ssh , scp , sftp , ssh-keygen , ssh-agent , sshd , ssh-keyscan Versiones SSH-1 SSH-2 incompatible con SSH-1. Incluye importantes mejoras: D-H para intercambiar claves Verificaci\u00f3n de integridad mediante Message authentication code (MAC) M\u00faltiples sesiones en una conexi\u00f3n Actualmente s\u00f3lo se usa SSH-2","title":"1.4.4 OpenSSH"},{"location":"#15-criptografia","text":"Arte y t\u00e9cnica de escribir con procedimientos o claves secretas o de un modo enigm\u00e1tico, de tal forma que lo escrito solamente sea inteligible para quien sepa descifrarlo. En castellano son sin\u00f3nimos cifrar y encriptar, as\u00ed como las acciones inversas descifrar y desencriptar.","title":"1.5 Criptograf\u00eda"},{"location":"#151-criptografia-de-clave-simetrica","text":"Se utiliza la misma clave para cifrar y descifrar Algoritmos: DES 3DES IDEA Blowfish CAST5 AES (Rijndael) Mecanismo \u00e1mpliamente utilizado Principal limitaci\u00f3n: Comunicaci\u00f3n de la clave","title":"1.5.1 Criptograf\u00eda de clave sim\u00e9trica"},{"location":"#152-clave-asimetrica-o-de-clave-publica","text":"Se crean dos claves relacionadas clave privada clave p\u00fablica La privada descifra lo cifrado por la p\u00fablica y al contrario Evita el problema del cifrado sim\u00e9trico Limitaciones M\u00e1s complejo Menos algoritmos disponibles Funcionamiento: idea (International Data Encryption Algorithm) Algoritmos Factorizaci\u00f3n de n\u00fameros primos (antiguos) RSA (Antes protegido por patente ahora caducada) DSA Curvas el\u00edpticas (modernos: m\u00e1s r\u00e1pidos) ECDSA Ed25519","title":"1.5.2 Clave asim\u00e9trica o de clave p\u00fablica"},{"location":"#153-funciones-hash","text":"Operaciones matem\u00e1ticas con las siguientes propiedades: - Mismo tama\u00f1o de resultado Unidireccionales No muestran informaci\u00f3n del origen Difieren con cualquier modificaci\u00f3n del origen Funciones hash habituales CRC, MD5, Whirpool, Tiger, SHA-1, SHA-256, SHA-512, SHA-3","title":"1.5.3 Funciones Hash"},{"location":"#16-metodos-de-autenticacion","text":"","title":"1.6 M\u00e9todos de autenticaci\u00f3n"},{"location":"#161-contrasena","text":"M\u00e9todo b\u00e1sico Usamos la contrase\u00f1a del usuario en el sistema remoto","title":"1.6.1 Contrase\u00f1a"},{"location":"#162-clave-publica","text":"El usuario genera un par de claves p\u00fablica/privada Ubica la clave p\u00fablica en el equipo remoto Accede a su sesi\u00f3n sin contrase\u00f1a","title":"1.6.2 Clave p\u00fablica"},{"location":"#163-kerberos","text":"Principalmente en entornos corporativos Se solicita un ticket al servidor kerberos Kerberos proporciona SSO ( Single Sign-On sesi\u00f3n de inicio \u00fanica) Permite comunicarse con cualquier servidor ssh kerberizado","title":"1.6.3 Kerberos"},{"location":"#164-gssapi","text":"Biblioteca API","title":"1.6.4 GSSAPI"},{"location":"#17-como-funciona-ssh","text":"","title":"1.7 \u00bfC\u00f3mo funciona ssh?"},{"location":"#171-fase-1-negociacion","text":"El cliente se conecta al servidor El servidor muestra su versi\u00f3n de ssh El cliente muestra su versi\u00f3n de ssh El servidor env\u00eda su clave p\u00fablica El cliente verifica la huella de la clave p\u00fablica entre las que tiene guardadas Negocian qu\u00e9 algoritmo y semilla utilizar Ambos generan las claves de la sesi\u00f3n e intercambian la p\u00fablica para verificar que la otra parte lo ha hecho igual","title":"1.7.1 Fase 1.- Negociaci\u00f3n"},{"location":"#172-fase-2-autenticacion","text":"Una vez establecida la clave de sesi\u00f3n se utiliza para cifrar toda la comunicaci\u00f3n El servidor ofrece en orden los m\u00e9todos de autenticaci\u00f3n disponibles El cliente los rechaza hasta que encuentra uno a utilizar Cuando el usuario se ha autenticado satisfactoriamente se abre una sesi\u00f3n en el equipo remoto","title":"1.7.2 Fase 2.- Autenticaci\u00f3n"},{"location":"#2-instalacion-del-entorno-de-pruebas","text":"Habitualmente los equipos con alguna variedad de GNU/Linux traen un servidor ssh instalado, en el caso de los sistemas Debian y derivados el paquete que proporciona el servidor ssh se llama openssh-server . Podemos comprobar si ya est\u00e1 instalado mediante la instrucci\u00f3n: dpkg -l | grep openssh-server o si est\u00e1 en marcha con systemctl status sshd o con ps ps aux | grep sshd o bien comprobando la escucha sobre el puerto 22 con ss -lntp En caso de no estarlo, podemos instalarlo con: sudo apt-get install openssh-server \u00f3 en Arch con pacman -S openssh El fichero de configuraci\u00f3n de este servicio se encuentra habitualmente en /etc/ssh/sshd_config y contiene las opciones de configuraci\u00f3n. Las opciones aplicadas las obtendr\u00edamos mediante: grep -v '^$\\|^#' /etc/ssh/sshd_config ChallengeResponseAuthentication no UsePAM yes X11Forwarding yes PrintMotd no AcceptEnv LANG LC_* Subsystem sftp /usr/lib/openssh/sftp-server Sin embargo, en el caso de ssh hay muchas opciones que no vienen definidas y que se asume un valor por defecto, lo que puede resultar confuso. Sin embargo podemos utilizar la opci\u00f3n -T: extended test mode que comprueba la validez del fichero de configuraci\u00f3n y muestra las opciones efectivas que se aplican (las que est\u00e1n habilitadas de forma expl\u00edcita y las que tienen valores por defecto (en sistemas GNU/linux sshd s\u00f3lo puede ejecutarlo un usuario privilegiado): sshd -T ... port 22 addressfamily any listenaddress [::]:22 listenaddress 0.0.0.0:22 usepam yes logingracetime 120 x11displayoffset 10 maxauthtries 6 maxsessions 10 clientaliveinterval 120 clientalivecountmax 3 streamlocalbindmask 0177 permitrootlogin without-password ignorerhosts yes ignoreuserknownhosts no hostbasedauthentication no hostbasedusesnamefrompacketonly no pubkeyauthentication yes kerberosauthentication no kerberosorlocalpasswd yes kerberosticketcleanup yes gssapiauthentication no gssapikeyexchange no gssapicleanupcredentials yes gssapistrictacceptorcheck yes gssapistorecredentialsonrekey no passwordauthentication yes kbdinteractiveauthentication no challengeresponseauthentication no printmotd no printlastlog yes x11forwarding yes x11uselocalhost yes permittty yes permituserrc yes strictmodes yes tcpkeepalive yes permitemptypasswords no permituserenvironment no compression yes gatewayports no usedns no allowtcpforwarding yes allowagentforwarding yes disableforwarding no allowstreamlocalforwarding yes streamlocalbindunlink no useprivilegeseparation sandbox fingerprinthash SHA256 pidfile /run/sshd.pid xauthlocation /usr/bin/xauth ciphers chacha20-poly1305@openssh.com,aes128-ctr, ... macs umac-64-etm@openssh.com,umac-128-etm@openssh.com, ... versionaddendum none kexalgorithms curve25519-sha256,curve25519-sha256@libssh.org, ... hostbasedacceptedkeytypes ecdsa-sha2-nistp256-cert-v01@openssh.com, ... hostkeyalgorithms ecdsa-sha2-nistp256-cert-v01@openssh.com, ... pubkeyacceptedkeytypes ecdsa-sha2-nistp256-cert-v01@openssh.com, ... loglevel INFO syslogfacility AUTH authorizedkeysfile .ssh/authorized_keys .ssh/authorized_keys2 hostkey /etc/ssh/ssh_host_rsa_key hostkey /etc/ssh/ssh_host_ecdsa_key hostkey /etc/ssh/ssh_host_ed25519_key acceptenv LANG acceptenv LC_* authenticationmethods any subsystem sftp /usr/lib/openssh/sftp-server maxstartups 10:30:100 permittunnel no ipqos lowdelay throughput rekeylimit 0 0 permitopen any Muchas m\u00e1quinas vienen con un servidor ssh que s\u00f3lo permite acceder con clave p\u00fablica, por lo que no funciona inicialmente si nos intentamos conectar con usuario/contrase\u00f1a. Para poder hacerlo se debe descomentar el siguiente par\u00e1metro del fichero de configuraci\u00f3n /etc/ssh/sshd_config : PasswordAuthentication yes Y reiniciar el servidor ssh con: systemctl restart ssh","title":"2 Instalaci\u00f3n del entorno de pruebas"},{"location":"#3-utilizacion-de-ssh","text":"","title":"3 Utilizaci\u00f3n de ssh"},{"location":"#31-autenticacion-con-usuario-y-contrasena","text":"El m\u00e9todo inicial de autenticaci\u00f3n se basa en utilizar los usuarios del sistema y sus contrase\u00f1as que est\u00e1n almacenadas en \u00e9l. A SSH no le afecta la forma en la que el sistema las almacena (fichero, LDAP, etc.). Las opciones de configuraci\u00f3n que afectan en este caso son las siguientes: passwordauthentication yes|no challengeresponseauthentication yes|no permitemptypasswords yes|no Te\u00f3ricamente challengeresponseauthentication es un mecanismo m\u00e1s complejo que permite preguntar al usuario otras cuestiones, no s\u00f3lo la contrase\u00f1a, pero en la pr\u00e1ctica se suele preguntar la contrase\u00f1a. En sistemas GNU/Linux se a\u00f1ade la opci\u00f3n usepam yes Que permite utilizar el subsistema PAM como mecanismo de autenticaci\u00f3n.","title":"3.1 Autenticaci\u00f3n con usuario y contrase\u00f1a"},{"location":"#311-ejercicio-simple-de-acceso-con-usuariocontrasena","text":"Accedemos a un servidor remoto con: ssh usuario@172.22.200.175 The authenticity of host '172.22.200.175 (172.22.200.175)' can't be established. ECDSA key fingerprint is SHA256:Bsv9OS7Qf94ANguOiDLNPHn7J+XlwisWZydmfqa4QMo. Are you sure you want to continue connecting (yes/no)? Para verificar el servidor, en lugar de mostrarnos la clave p\u00fablica completa, nos muestra la huella (fingerprint) de la clave p\u00fablica del servidor, que no es m\u00e1s que un hash de la clave p\u00fablica, en este caso utlizando SHA256. Podemos comprobar la correspondencia entre la clave p\u00fablica y la huella mediante la instrucci\u00f3n: ssh-keygen -l -E sha256 -f fichero_con_clave_publica Se podr\u00eda hablar con detalle de la forma efectiva de verificar las claves p\u00fablicas, pero en este momento se aceptar\u00e1 la clave que se ofrece y por tanto se teclear\u00e1 \u201cyes\u201d y a continuaci\u00f3n se pide la contrase\u00f1a de acceso, se introduce y se accede a una shell en el equipo remoto: Warning: Permanently added '172.22.200.175' (ECDSA) to the list of known hosts. usuario@172.22.200.175's password: ********** Last login: Fri Feb 16 17:34:41 2018 from 172.23.0.22 usuario@host:~$","title":"3.1.1 Ejercicio simple de acceso con usuario/contrase\u00f1a"},{"location":"#312-ejecucion-remota","text":"SSH permite ejecutar una orden remotamente de forma no interactiva, lo que resulta muy c\u00f3modo cuando hay que realizar tareas muy espec\u00edficas en un equipo remoto. Por ejemplo: ssh usuario@172.22.200.175 sudo apt update Tambi\u00e9n se pueden encadenar varias \u00f3rdenes o ejecutar un script: ssh usuario@172.22.200.175 'sudo apt update && sudo apt upgrade'","title":"3.1.2 Ejecuci\u00f3n remota"},{"location":"#313-consideraciones-acerca-de-root","text":"Se puede restringir el acceso con el usuario root utilizando contrase\u00f1a, aspecto importante desde el punto de vista de seguridad, por lo que hoy en d\u00eda habitualmente se utiliza la opcion: PermitRootLogin without-password En caso de que quisi\u00e9ramos permitir acceder con el usuario root y contrase\u00f1a, deber\u00edamos poner esta opci\u00f3n a yes.","title":"3.1.3 Consideraciones acerca de root"},{"location":"#314-otras-opciones","text":"No espec\u00edficas del acceso con usuario y contrase\u00f1a, pero adecuadas para empezar: PrintLastLog yes|no PrintMotd yes|no Banner Ruta_a_fichero","title":"3.1.4 Otras opciones"},{"location":"#32-autenticacion-con-claves-publicaprivada","text":"Aunque el mecanismo m\u00e1s f\u00e1cil de entender al utilizar ssh es la autenticaci\u00f3n del usuario mediante la contrase\u00f1a en el equipo remoto, el mecanismo m\u00e1s \u201cnatural\u201d y probablemente m\u00e1s habitual es la autenticaci\u00f3n mediante un par de claves p\u00fablica/privada.","title":"3.2 Autenticaci\u00f3n con claves p\u00fablica/privada"},{"location":"#321-creacion-de-la-clave-privada","text":"Para crear la clave privada utilizaremos la herramienta ssh-keygen , especificando el algoritmo que deseamos utilizar mediante el par\u00e1metro -t (dsa | ecdsa | ed25519 | rsa | rsa1), por ejemplo: ssh-keygen -t ecdsa Se crear\u00e1 un di\u00e1logo mediante el cual nos pedir\u00e1 una frase de paso para proteger la clave privada, paso que se ignorar\u00e1 de momento y se explicar\u00e1 con detalle en la siguiente secci\u00f3n: Generating public/private ecdsa key pair. Enter file in which to save the key (/home/alberto/.ssh/id_ecdsa): [ENTER] Enter passphrase (empty for no passphrase): [ENTER] Enter same passphrase again: [ENTER] Your identification has been saved in /home/alberto/.ssh/id_ecdsa. Your public key has been saved in /home/alberto/.ssh/id_ecdsa.pub. The key fingerprint is: SHA256:QQ0bm3FBXKhLyWUfa7teeHgufwLPdK8nIu0UlMCJ6/M alberto@mut The key's randomart image is: +---[ECDSA 256]---+ | =B==. | | ..BO... | | .=* .oo | | *. .+ | | oS. ... | | + o+. .| | o .+*+..| | E.=== +| | +o++* | +----[SHA256]-----+ En este caso hemos optado por dejar el nombre de la clave por defecto (~/.ssh/idecdsa). Si vamos al directorio ~/.ssh veremos que existen dos nuevos ficheros, que se corresponden con la clave p\u00fablica y la privada: -rw------- 1 alberto alberto 227 feb 18 09:16 id_ecdsa -rw-r--r-- 1 alberto alberto 173 feb 18 09:16 id_ecdsa.pub L\u00f3gicamente la clave privada se ha protegido en el sistema de forma que s\u00f3lo el propietario puede leerla o modificarla, mientras que la p\u00fablica puede leerla cualquier usuario y en general podr\u00e1 estar accesible en cualquier sitio sin restricciones, ya que no es posible obtener la clave privada a partir de ella. Vemos el contenido de estas claves (obviamente se muestran aqu\u00ed a modo de ejemplo y se trata de claves que no se van a utilizar nunca en un entorno real): ~/.ssh/id_ecdsa -----BEGIN EC PRIVATE KEY----- MHcCAQEEIN53r8/ghcQ94wjNPtvz0VvSFsuU7ePsPkriWPhpC137oAoGCCqGSM49 AwEHoUQDQgAEXJKU4yRlIdnKGG8qQA2PXpfCPVz9xpbB3TXOh9ymC9XtjgP3ZCwU tdNnLTQNJm8PO4MHtFZBTxeFE39lD7WVYQ== -----END EC PRIVATE KEY----- ~/.ssh/id_ecdsa.pub ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAy\\ NTYAAABBBFySlOMkZSHZyhhvKkANj16Xwj1c/caWwd01zofcpgvV7Y4D92QsFLXT\\ Zy00DSZvDzuDB7RWQU8XhRN/ZQ+1lWE= alberto@mut","title":"3.2.1 Creaci\u00f3n de la clave privada"},{"location":"#322-copia-de-la-clave-publica-en-el-equipo-remoto","text":"Para que se pueda utilizar este mecanismo de autenticaci\u00f3n es preciso que la clave p\u00fablica del usuario se encuentre en la cuenta que \u00e9ste posee en el equipo remoto, de forma m\u00e1s concreta, dentro del fichero ~/.ssh/authorized_keys , por lo que debemos utilizar alg\u00fan m\u00e9todo para ubicarla all\u00ed: Accedemos con contrase\u00f1a y copiamos y pegamos la clave p\u00fablica Accedemos con otra clave p\u00fablica que hubi\u00e9semos copiado previamente y pegamos la nueva clave p\u00fablica Utilizamos cualquier sistema en el arranque de la m\u00e1quina que obtenga la clave p\u00fablica y la ubique en su sitio (muy habitual en cloud computing) Utilizamos la herramienta ssh-copy-id Vamos a ver el \u00faltimo m\u00e9todo: ssh-copy-id -i ~/.ssh/id_ecdsa debian@172.22.200.175 /usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: \"/home/alberto/.ssh/id_ecdsa.pub\" /usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed /usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys debian@172.22.200.175's password: Number of key(s) added: 1 Now try logging into the machine, with: \"ssh 'debian@172.22.200.175'\" and check to make sure that only the key(s) you wanted were added. Si accedemos al equipo remoto, podremos comprobar que la clave p\u00fablica que hemos exportado se encuentra en el fichero ~/.ssh/authorized_keys .","title":"3.2.2 Copia de la clave p\u00fablica en el equipo remoto"},{"location":"#323-clave-privada-con-nombre-no-estandar","text":"En el caso anterior hemos creado un par de claves con nombre est\u00e1ndar ( idecdsa e idecdsa.pub ), pero es posible definir cualquier nombre a la hora de crear el par de claves, por ejemplo: ssh-keygen -t ed25519 Generating public/private ed25519 key pair. Enter file in which to save the key (/home/debian/.ssh/id_ed25519): openwebinars Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in openwebinars. Your public key has been saved in openwebinars.pub. The key fingerprint is: SHA256:HzEVg7wVelxLpuHrv+BUG8QG4bI0AsED7PnUvzFdlCI debian@asd The key's randomart image is: +--[ED25519 256]--+ | ..oo. . .O++. | | . o. E*oXo. | | . . o. B+*o= | | o . .o.B +. | | o S.o...o | | . .+o.. o | | .++ . | | .o o | | . o. | +----[SHA256]-----+ Proceder\u00edamos de igual forma que en el caso anterior, aunque ahora para utilizar la clave en cualquier sesi\u00f3n ssh , deber\u00edamos indicarlo de forma expl\u00edcita: ssh -i ~/.ssh/openwebinars debian@172.22.200.175","title":"3.2.3 Clave privada con nombre no est\u00e1ndar"},{"location":"#324-utilizacion-en-cloud-computing","text":"Hoy en d\u00eda es cada vez m\u00e1s habitual la utilizaci\u00f3n de m\u00e1quinas virtuales en alg\u00fan proveedor de nube de infraestructura p\u00fablica o privada (AWS, Azure, OpenStack, etc.), en estos casos es imprescindible utilizar este mecanismo de clave p\u00fablica/privada para acceder a estas m\u00e1quinas virtuales.","title":"3.2.4 Utilizaci\u00f3n en cloud computing"},{"location":"#325-generacion-de-una-clave-publica-a-partir-de-la-privada","text":"Aunque habitualmente se generan ambas claves, en diferentes circunstancias puede ocurrir que tengamos la clave privada, pero no la correspondiente clave p\u00fablica, en ese caso podemos utilizar ssh-keygen para obtenerla: ssh-keygen -y -f clave >> clave.pub Evidentemente si tenemos la clave p\u00fablica y no la privada, no podemos hacer el proceso inverso.","title":"3.2.5 Generaci\u00f3n de una clave p\u00fablica a partir de la privada"},{"location":"#326-utilizacion-en-procesos-no-interactivos","text":"Puesto que teniendo acceso a la clave privada el acceso se puede realizar al equipo remoto sin ninguna intervenci\u00f3n, este mecanismo es ideal para su utilizaci\u00f3n en procesos que no requieran intervenci\u00f3n humana, como muchas conexiones que pueden realizarse entre diferentes equipos. La conexi\u00f3n es segura y autenticada, aunque es muy importante custodiar adecuadamente las claves privadas.","title":"3.2.6 Utilizaci\u00f3n en procesos no interactivos"},{"location":"#33-autenticacion-con-claves-publicaprivada-y-frase-de-paso","text":"La autenticaci\u00f3n con clave privada tiene importantes ventajas respecto al acceso con contrase\u00f1a, pero tiene el inconveniente de la custodia de la clave privada. Cualquier usuario que obtuviese nuestra clave privada podr\u00eda entrar en nuestra cuenta de cualquier equipo en el que tuvi\u00e9semos exportada la correspondiente clave p\u00fablica. Para aumentar la seguridad en esta situaci\u00f3n se utiliza una frase de paso para proteger la clave privada, frase que se introduce al crear la clave privada o que puede modificarse a posteriori. Vamos a crear una nueva clave, pero en este caso protegida con frase de paso: ssh-keygen -t ecdsa Generating public/private ecdsa key pair. Enter file in which to save the key (/home/alberto/.ssh/id_ecdsa): Enter passphrase (empty for no passphrase): <- Teclear frase de paso -> Enter same passphrase again: <- Teclear frase de paso de nuevo -> Your identification has been saved in /home/alberto/.ssh/id_ecdsa. Your public key has been saved in /home/alberto/.ssh/id_ecdsa.pub. The key fingerprint is: SHA256:mvCLrZMvdUDOorOkvd/1iosAZmhGS2fWPQmjAVMjjtk alberto@mut The key's randomart image is: +---[ECDSA 256]---+ | +o+ o | |ooo = = . | |o+E= = + | |+ = . + . | |o* ... .S | |=.+ o.o. | | +.o o+.. | |. o.+= + . | | .o==B.... | +----[SHA256]-----+ De esta forma la clave privada no es \u00fatil a menos que se conozca la frase de paso. Procedemos de igual forma que en el caso anterior, exportando la clave p\u00fablica, aunque ahora cada vez que accedamos nos solicitar\u00e1 la frase de paso de la clave privada: ssh -i ~/.ssh/id_ecdsa debian@172.22.200.175 Enter passphrase for key '/home/alberto/.ssh/id_ecdsa': Hemos ganado en seguridad, pero hemos perdido en usabilidad, porque ahora tenemos que escribir la frase de paso cada vez que accedamos al equipo remoto y adem\u00e1s no es v\u00e1lido para procesos no interactivos. Para solucionar este inconveniente usaremos ssh-agent en una secci\u00f3n posterior.","title":"3.3 Autenticaci\u00f3n con claves p\u00fablica/privada y frase de paso"},{"location":"#34-ssh-agent","text":"ssh-agent es un programa que permite almacenar las claves privadas de una sesi\u00f3n y es muy \u00fatil cuando usamos claves con frase de paso, ya que podemos a\u00f1adir la clave privada al agente ssh y s\u00f3lo tendremos que poner la frase de paso una vez, permitiendo utilizar ssh de forma transparente sin volver a introducir la frase de paso todo el tiempo que dure la sesi\u00f3n del usuario (realmente se puede limitar a una cantidad de tiempo menor si se desea). ssh-agent se suele ejecutar autom\u00e1ticamente en las sesiones gr\u00e1ficas de los sistemas, como podemos verificar mediante: env |grep SSH ... SSH_AUTH_SOCK=/run/user/1001/keyring/ssh SSH_AGENT_PID=2743 O a trav\u00e9s de ps: ps aux |grep ssh-agent alberto 2743 .... ..... 0:00 /usr/bin/ssh-agent x-session-manager De hecho, si tuvi\u00e9ramos alguna clave privada sin frase de paso se habr\u00eda cargado autom\u00e1ticamente en el agente ssh y podr\u00edamos utilizarla de forma totalmente transparente.","title":"3.4 ssh-agent"},{"location":"#341-anadir-una-clave-privada-a-ssh-agent","text":"Mediante la herramienta ssh-add podemos a\u00f1adir una clave al agente ssh, por ejemplo: ssh-add ~/.ssh/openwebinars Si la clave est\u00e1 protegida por una frase de paso, se nos pedir\u00e1 en ese momento, o se utilizar\u00e1 la aplicaci\u00f3n ssh-askpass si se tratase de una aplicaci\u00f3n gr\u00e1fica u otra que no tuviese asociada una terminal. Podemos ver las claves cargadas mediante: ssh-add -L Y sus huellas con: ssh-add -l ssh-agent permite que cualquier otra aplicaci\u00f3n de la misma sesi\u00f3n utilice las claves privadas que almacena sin tener que volver a autenticarse, por lo que es importante controlar el uso de la sesi\u00f3n, bloque\u00e1ndola cuando no se est\u00e9 usando. Se pueden eliminar claves ssh del agente mediante: ssh-add -d openwebinars O incluso eliminar todas las claves con: ssh-add -D","title":"3.4.1 A\u00f1adir una clave privada a ssh-agent"},{"location":"#342-ejecucion-de-ssh-agent","text":"En el caso de que utilicemos un sistema que no haya cargado autom\u00e1ticamente un agente ssh, podemos ejecutarlo directamente, habitualmente se har\u00eda abriendo una nueva shell: ssh-agent /bin/bash","title":"3.4.2 Ejecuci\u00f3n de ssh-agent"},{"location":"#35-gestion-de-ficheros-authorized_keys-y-known_hosts","text":"","title":"3.5 Gesti\u00f3n de ficheros: authorized_keys y known_hosts"},{"location":"#351-fichero-sshauthorized_keys","text":"Se almacenan las claves p\u00fablicas de los usuarios que pueden acceder a esta cuenta mediante clave p\u00fablica/clave privada, el formato es: <algoritmo> <clavepublica> <comentario> Por ejemplo: ssh-rsa AAAAB3NzaC1yc2EAA\u2026dPh alberto@mut Si queremos que utilizar un par de claves para acceder a un equipo, debemos asegurarnos de que exista la clave p\u00fablica en este fichero y cuando ya dejemos de utilizarla debemos borrar la l\u00ednea correspondiente. Fichero ~/.ssh/knownhosts Se almacenan las claves p\u00fablicas de todos los equipos remotos a los que nos hemos conectado y que hemos aceptado, el formato es: <nombre o IP equipo> <algoritmo> <clavep\u00fablica> Actualmente es m\u00e1s habitual que no se guarde el nombre o direcci\u00f3n IP del equipo en claro, sino que se almacene el hash. Para encontrar un determinado equipo por nombre o direcci\u00f3n IP podemos utilizar la instrucci\u00f3n: ssh-keygen -F 172.22.200.175 1 lbA\u2026.9Lo= ecdsa-sha2-nistp256 AAAA\u2026..ynTO90= Cambio de clave p\u00fablica del servidor Habitualmente se almacenan las claves p\u00fablicas de los servidores a los que nos hemos conectado previamente en el fichero ~/.ssh/knownhosts, por lo que se verifica cada vez que se conecta que el servidor ofrece la misma clave p\u00fablica. En caso de que no coincida veremos el siguiente mensaje: ssh debian@172.22.200.175 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY! Someone could be eavesdropping on you right now (man-in-the-middle attack)! It is also possible that a host key has just been changed. The fingerprint for the ECDSA key sent by the remote host is SHA256:J9CMWSbavkqECRI1KWhy8s/D7UVJWDiysAocAbo1F6k. Please contact your system administrator. Add correct host key in home/alberto.ssh/knownhosts to get rid of this message. Offending ECDSA key in home/alberto.ssh/knownhosts:88 remove with: ssh-keygen -f \"home/alberto.ssh/knownhosts\" -R 172.22.200.175 ECDSA host key for 172.22.200.175 has changed and you have requested strict checking. Host key verification failed. Es posible que se trate de una suplantaci\u00f3n y por tanto un problema de seguridad, pero tambi\u00e9n es posible que se haya realizado un cambio en el servidor que haya implicado un cambio en las claves del servicio ssh o una situaci\u00f3n muy habitual hoy en d\u00eda: estamos reutilizando la misma IP para un nuevo servidor. En caso de que estemos seguros de que no hay ning\u00fan problema de seguridad al acceder a ese equipo remoto, debemos eliminar la antigua clave asociada a la direcci\u00f3n IP (o al nombre), mediante la instrucci\u00f3n: ssh-keygen -R 172.22.200.175 home/alberto.ssh/knownhosts updated. Original contents retained as home/alberto.ssh/knownhosts.old","title":"3.5.1 Fichero ~/.ssh/authorized_keys"},{"location":"#352-fichero-sshauthorized_keys","text":"Almacena las claves p\u00fablicas de los usuarios que pueden acceder a esta cuenta mediante clave p\u00fablica/clave privada, el formato es: <algoritmo> <clave_publica> <comentario> Por ejemplo: ssh-rsa AAAAB3NzaC1yc2EAA...dPh alberto@mut Si queremos utilizar un par de claves para acceder a un equipo, debemos asegurarnos de que exista la clave p\u00fablica en este fichero y cuando ya dejemos de utilizarla debemos borrar la l\u00ednea correspondiente.","title":"3.5.2 Fichero ~/.ssh/authorized_keys"},{"location":"#353-fichero-sshknownhosts","text":"Almacena las claves p\u00fablicas de todos los equipos remotos a los que nos hemos conectado y que hemos aceptado, el formato es: nombre_o_IP_equipo algoritmo clave_p\u00fablica Actualmente es m\u00e1s habitual que no se guarde el nombre o direcci\u00f3n IP del equipo en claro, sino que se almacene el hash. Para encontrar un determinado equipo por nombre o direcci\u00f3n IP podemos utilizar la instrucci\u00f3n: ssh-keygen -F 172.22.200.175 #Host 172.22.200.175 found: line 88 |1|lbA....9Lo= ecdsa-sha2-nistp256 AAAA.....ynTO90=","title":"3.5.3 Fichero ~/.ssh/knownhosts"},{"location":"#354-cambio-de-clave-publica-del-servidor","text":"Habitualmente se almacenan las claves p\u00fablicas de los servidores a los que nos hemos conectado previamente en el fichero ~/.ssh/known_hosts, por lo que se verifica, cada vez que se conecta, que el servidor ofrece la misma clave p\u00fablica. En caso de que no coincida veremos el siguiente mensaje: ssh debian@172.22.200.175 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY! Someone could be eavesdropping on you right now (man-in-the-middle attack)! It is also possible that a host key has just been changed. The fingerprint for the ECDSA key sent by the remote host is SHA256:J9CMWSbavkqECRI1KWhy8s/D7UVJWDiysAocAbo1F6k. Please contact your system administrator. Add correct host key in /home/alberto/.ssh/known_hosts to get rid of this message. Offending ECDSA key in /home/alberto/.ssh/known_hosts:88 remove with: ssh-keygen -f \"/home/alberto/.ssh/known_hosts\" -R 172.22.200.175 ECDSA host key for 172.22.200.175 has changed and you have requested strict checking. Host key verification failed. Es posible que se trate de una suplantaci\u00f3n y por tanto un problema de seguridad, pero tambi\u00e9n es posible que se haya realizado un cambio en el servidor que haya implicado un cambio en las claves del servicio ssh o una situaci\u00f3n muy habitual hoy en d\u00eda: estamos reutilizando la misma IP para un nuevo servidor. En caso de que estemos seguros de que no hay ning\u00fan problema de seguridad al acceder a ese equipo remoto, debemos eliminar la antigua clave asociada a la direcci\u00f3n IP (o al nombre), mediante la instrucci\u00f3n: ssh-keygen -R 172.22.200.175 #Host 172.22.200.175 found: line 88 /home/alberto/.ssh/known_hosts updated. Original contents retained as /home/alberto/.ssh/known_hosts.old","title":"3.5.4 Cambio de clave p\u00fablica del servidor"},{"location":"#36-forwarding","text":"","title":"3.6 Forwarding"},{"location":"#361-agent-forwarding","text":"Mediante esta t\u00e9cnica, es posible que el cliente ssh se comunique con un agente ssh que corre un una m\u00e1quina remota y sin necesidad de poner las claves privadas en \u00e9l, poder saltar a otro equipo remoto no accesible directamente. Es una t\u00e9cnica muy \u00fatil que permite no exponer directamente los servidores a los que realmente queremos acceder mediante ssh, sino que accedemos a ellos de forma transparente usando un equipo a modo de basti\u00f3n. Esta posibilidad debe estar habilitada en el servidor intermedio mediante la directiva: allowagentforwarding yes Que est\u00e1 habilitada por defecto. En el cliente es necesario habilitar el par\u00e1metro: ForwardAgent yes","title":"3.6.1 Agent forwarding"},{"location":"#362-x11-forwarding","text":"A trav\u00e9s de la t\u00e9cnica de X11 forwarding podemos ver en nuestra pantalla aplicaciones gr\u00e1ficas que se ejecutan a trav\u00e9s de ssh en un equipo remoto (y viceversa). Aunque en primer lugar tiene que estar permitido en el servidor a trav\u00e9s de las directivas: X11Forwarding yes X11DisplayOffset 10 El cliente para conectarse y utilizar esta funcionalidad, deber\u00e1 configurar adicionalmente la opci\u00f3n: ForwardX11 yes Al conectarnos por ssh podremos comprobar que est\u00e1 definida la variable DISPLAY con un valor definido a trav\u00e9s de la variable X11DisplayOffset, por ejemplo: env |grep DISPLAY DISPLAY=localhost:10 Al ejecutar una aplicaci\u00f3n en el equipo remoto sobre la conexi\u00f3n ssh nos aparecer\u00e1 en nuestra pantalla. Ampliaci\u00f3n","title":"3.6.2 X11 forwarding"},{"location":"#4-configuracion-de-ssh","text":"","title":"4 Configuraci\u00f3n de ssh"},{"location":"#41-configuracion-del-cliente-ssh","text":"Existe el fichero /etc/ssh/ssh_config en el que se especifican los par\u00e1metros de configuraci\u00f3n generales que van a utilizar por defecto todos los clientes ssh que se ejecuten en esa m\u00e1quina. Los posibles par\u00e1metros que podemos definir en ese fichero se detallan en la p\u00e1gina 5 del manual de ssh_config . Algunos par\u00e1metros significativos","title":"4.1 Configuraci\u00f3n del cliente ssh"},{"location":"#411-sendenv-lang-lc_","text":"Mediante este par\u00e1metro se define en el equipo remoto los par\u00e1metros de localizaci\u00f3n del cliente, siempre que estos est\u00e9n definidos all\u00ed. Por ejemplo, supongamos que la variable local sea LANG=es.ES.UTF-8 , seguir\u00e1 siendo en el equipo remoto siempre que exista, en caso contrario se pondr\u00e1 la localizaci\u00f3n por defecto del sistema: usuario@cliente:~$ echo $LANG es_ES.UTF-8 usuario@cliente:~$ ssh root@servidor1 The programs included with the Debian GNU/Linux system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. No mail. Last login: Thu Feb 22 10:06:47 2018 from ... root@servidor1:~# echo $LANG en_US.UTF-8","title":"4.1.1 SendEnv LANG LC_*"},{"location":"#412-hashknownhosts-yesno","text":"Para ofuscar mediante un hash la IP o el nombre de los servidores de los que almacenamos las claves p\u00fablicas en el fichero ~/.ssh/known_hosts","title":"4.1.2 HashKnownHosts yes|no"},{"location":"#413-gssapiauthentication-yesno","text":"Para habilitar este m\u00e9todo de autenticaci\u00f3n, en sistemas Debian viene habilitado, aunque s\u00f3lo es necesario en los casos en los que se vaya a usar este m\u00e9todo de autenticaci\u00f3n.","title":"4.1.3 GSSAPIAuthentication yes|no"},{"location":"#414-caracter-de-escape","text":"En algunas ocasiones podemos tener problemas con nuestra conexi\u00f3n ssh y que la shell remota no responda a las instrucciones que mandamos, en esos casos siempre se podr\u00e1 cerrar la conexi\u00f3n mediante el car\u00e1cter de escape que hayamos definido en nuestro cliente ssh, este caracter por defecto es \u201c~\u201d: EscapeChar ~ Para ejecutarlo escribir\u00edamos la secuencia \u201c~\u201d.","title":"4.1.4 Car\u00e1cter de escape"},{"location":"#415forwardagent-forwardx11","text":"Explicados en la secci\u00f3n espec\u00edfica de forwarding","title":"4.1.5ForwardAgent, ForwardX11"},{"location":"#416-globalknownhostsfile-ltficherogt","text":"Permite la utilizaci\u00f3n de un fichero knownhosts para todos los usuarios de un equipo.","title":"4.1.6 GlobalKnownHostsFile &lt;fichero&gt;"},{"location":"#417-numberofpasswordprompts","text":"N\u00famero de intentos de acceso con contrase\u00f1a. Por defecto es 3","title":"4.1.7 NumberOfPasswordPrompts"},{"location":"#418-stricthostkeychecking-yesaskno","text":"Par\u00e1metro muy importante, utiliza para la gesti\u00f3n de las claves p\u00fablicas de los equipos remotos. La opci\u00f3n por defecto es \u201cask\u201d, de manera que si no se ha almacenado previamente la clave p\u00fablica se pregunta qu\u00e9 hacer. En el caso de ponerla en \u201cyes\u201d, se rechazar\u00e1 una conexi\u00f3n si no existe previamente la clave p\u00fablica y en caso de optar por la opci\u00f3n \u201cno\u201d, no se har\u00e1 ninguna verificaci\u00f3n.","title":"4.1.8 StrictHostKeyChecking yes|ask|no"},{"location":"#419-userknownhostsfile-fichero","text":"Fichero knownhosts de usuario, por defecto ~/.ssh/knownhosts","title":"4.1.9 UserKnownHostsFile fichero"},{"location":"#4110-configuracion-por-usuario","text":"Salvo algunos par\u00e1metros generales, es poco probable que la mayor\u00eda de los par\u00e1metros que se pueden definir para el cliente ssh sean \u00fatiles para todos los usuarios de un equipo, es mucho m\u00e1s habitual que un usuario defina un fichero de configuraci\u00f3n con sus propios par\u00e1metros. Este fichero es ~/.ssh/config y los par\u00e1metros aqu\u00ed definidos prevalecen sobre los generales. Se pueden definir par\u00e1metros para todos los equipos remotos, pero es tambi\u00e9n muy \u00fatil agruparlos con el par\u00e1metro Host como en el siguiente ejemplo: GSSAPIAuthentication no Host 192.168.1.1 User root Port 2022 ForwardAgent yes Identityfile ~/.ssh/id_ecdsa StrictHostKeyChecking yes Host *.example.com StrictHostKeyChecking no UserKnownHostsFile=/dev/null LogLevel QUIET","title":"4.1.10 Configuraci\u00f3n por usuario"},{"location":"#4111-utilizar-parametros-directamente","text":"Independientemente de los par\u00e1metros que est\u00e9n definidos en cualquiera de las opciones anteriores, tambi\u00e9n es posible utilizar par\u00e1metros de forma expl\u00edcita en la propia l\u00ednea de comandos, pas\u00e1ndolos mediante el modificador \u201c-o\u201d, por ejemplo: ssh -o \"ForwardAgent yes\" usuario@172.22.200.175","title":"4.1.11 Utilizar par\u00e1metros directamente"},{"location":"#42-configuracion-del-servidor-ssh","text":"Tal como vimos en la instalaci\u00f3n y configuraci\u00f3n elemental del servidor ssh, podemos ver las opciones de configuraci\u00f3n que se aplican a nuestro servidor mediante: sshd -T |less Vamos a comentar algunas que pueden ser interesantes porque se modifican con cierta frecuencia.","title":"4.2 Configuraci\u00f3n del servidor ssh"},{"location":"#421-port-22","text":"Puerto tcp en el que va a escuchar peticiones el servidor ssh, por defecto es el 22/tcp, pero puede cambiarse sin problema.","title":"4.2.1 Port 22"},{"location":"#422-addressfamily-anyinetinet6","text":"El protocolo o protocolos de red a utilizar, puede ser inet(IPv4), inet6 (IPv6) o any(ambos) que es la opci\u00f3n por defecto.","title":"4.2.2 AddressFamily any|inet|inet6"},{"location":"#423-listenaddress","text":"Si queremos especificar que se permitan conexiones s\u00f3lo a trav\u00e9s de una direcci\u00f3n IP concreta (IPv4/IPv6).","title":"4.2.3 ListenAddress"},{"location":"#424-logingracetime-maxauthtries-y-maxsessions","text":"Para especificar el tiempo que se espera para que el usuario se acceda con \u00e9xito al sistema, el n\u00famero m\u00e1ximo de veces que puede introducir la contrase\u00f1a y el n\u00famero m\u00e1ximo de sesiones en la misma conexi\u00f3n.","title":"4.2.4 logingracetime, maxauthtries y maxsessions"},{"location":"#425-loglevel-y-syslogfacility","text":"Para controlar el nivel de detalle que mostrar en los logs del sistema, as\u00ed como la \u201cfacility\u201d a utilizar.","title":"4.2.5 loglevel y syslogfacility"},{"location":"#426-hostkey","text":"Fichero o ficheros que especifican la clave o claves privadas a utilizar por el servidor.","title":"4.2.6 hostkey"},{"location":"#5-transferencia-de-ficheros-a-traves-de-ssh","text":"","title":"5 Transferencia de ficheros a trav\u00e9s de ssh"},{"location":"#51-utilizacion-de-scp","text":"El cliente ssh incluye tambi\u00e9n el comando scp que permite copiar ficheros entre entre equipos mediante ssh y hacerlo de forma equivalente a la utilizaci\u00f3n local del cl\u00e1sico comando cp . No es necesario que el equipo origen o destino sea el equipo desde el que se ejecuta scp , tanto origen como destino pueden ser equipos a los que pueda acceder el usuario utilizando ssh. La sintaxis general de scp es: scp [[user@]host1:]file1 [[user@]host2:]file2","title":"5.1 Utilizaci\u00f3n de scp"},{"location":"#511-transferir-un-fichero-local-a-un-equipo-remoto","text":"scp /etc/resolv.conf usuario@172.22.200.175:resolv.conf.local El fichero remoto quedar\u00e1 como /home/usuario/resolv.conf.local ya que : indica el punto de acceso al equipo (/home/usuario/ en este caso) Transferir un fichero desde un equipo remoto a mi equipo local scp root@172.22.200.175:/etc/shadow . Que guardar\u00eda el fichero /etc/shadow del equipo remoto con el nombre shadow en el directorio en el que nos encontramos","title":"5.1.1 Transferir un fichero local a un equipo remoto"},{"location":"#512-transferir-un-fichero-entre-dos-equipos-remotos","text":"scp root@172.22.200.175:/etc/hosts root@172.22.200.176:/etc/hosts Esta opci\u00f3n es muy potente y permite crear sencillos scripts para unificar configuraciones, por ejemplo imaginemos que queremos tener la misma configuraci\u00f3n DNS en un conjunto de servidores, podr\u00edamos hacerlo de forma sencilla y potente con ssh mediante el siguiente script: #!/bin/bash for i in `seq 1 100`; do scp root@servidor1:/etc/resolv.conf 192.168.1.$i:/etc/resolv.conf done","title":"5.1.2 Transferir un fichero entre dos equipos remotos"},{"location":"#513-bonus-track","text":"Si utilizamos pares de claves en las conexiones, scp autocompleta el fichero origen o destino utilizando el doble tabulador.","title":"5.1.3 Bonus track"},{"location":"#52-utilizacion-de-sftp","text":"Al igual que scp , sftp permite transferir ficheros entre equipos remotos a trav\u00e9s de SSH, aunque su principal diferencia es que sftp permite utilizarlo de una forma interactiva, al igual que el tradicional ftp, incluyendo los mismos comandos que \u00e9ste. scp es mucho m\u00e1s habitual utilizarlo desde l\u00ednea de comandos, mientras que sftp se puede utilizar bien desde la l\u00ednea de comandos o a trav\u00e9s de uno de los m\u00faltiples clientes ftp que lo soportan. Es importante no confundir sftp (ssh ftp) con ftps que es una extensi\u00f3n del protocolo ftp a\u00f1adiendo ssl para el cifrado de la conexi\u00f3n.","title":"5.2 Utilizaci\u00f3n de sftp"},{"location":"#6-tuneles-ssh","text":"Esta t\u00e9cnica, tambi\u00e9n conocida como TCP forwarding o port forwarding, permite utilizar cualquier aplicaci\u00f3n de forma segura a trav\u00e9s de una conexi\u00f3n ssh (de ah\u00ed la utilizaci\u00f3n del t\u00e9rmino t\u00fanel).","title":"6 T\u00faneles SSH"},{"location":"#61-local-forwarding","text":"Desde nuestra m\u00e1quina queremos acceder a un servicio, pero este servicio o bien no es accesible (por ejemplo por un cortafuegos que lo impide), o no es seguro hacerlo desde nuestra m\u00e1quina, pero tenemos acceso a otro equipo a trav\u00e9s de ssh y desde ese equipo s\u00ed podemos acceder al servicio que queremos o es seguro hacerlo. Vamos a verlo con un ejemplo: Queremos enviar un correo desde nuestro servidor de la empresa (puerto 25/tcp), pero estamos fuera y no queremos conectarnos de forma insegura, por lo que establecemos un t\u00fanel ssh de la siguiente forma: ssh -f -L 1025:smtp.example.com:25 remoto.example.com -N Esto abrir\u00e1 el puerto 1025/tcp en nuestra m\u00e1quina que podremos utilizar de forma segura para enviar correo, ya que se pasar\u00e1 a trav\u00e9s de ssh al equipo remoto.example.com y de ah\u00ed al servidor smtp.example.com.","title":"6.1 Local forwarding"},{"location":"#62-remote-forwarding","text":"Supongamos el caso contrario, en el que queremos que una m\u00e1quina remota utilice un servicio de nuestra m\u00e1quina, pero o bien no es accesible de forma directa o bien no es seguro hacerlo, por lo que podr\u00edamos definir una conexi\u00f3n ssh para realizarlo como la siguiente: ssh -f -L 8080:localhost:80 remoto.example.com -N De esa manera desde el equipo remoto, quien acceda al puerto 8080/tcp estar\u00e1 accediendo al puerto 80/tcp de nuestra m\u00e1quina a trav\u00e9s de un t\u00fanel ssh. La directiva GatewayPorts yes|no limita el puerto 8080 del caso anterior a que se pueda acceder s\u00f3lo desde el propio equipo remoto, o bien desde cualquier equipo.","title":"6.2 Remote forwarding"},{"location":"#63-forwarding-dinamico","text":"Mediante este mecanismo, lo que hacemos es crear un servidor SOCKS en nuestro equipo, que permite utilizar desde nuestra m\u00e1quina cualquier cliente que soporte este mecanismo, en particular un navegador web. Definir\u00edamos un servidor socks local que sale a trav\u00e9s de un t\u00fanel ssh con un equipo remoto de la siguiente forma: ssh -D 8080 -f -C -q -N remote.example.com","title":"6.3 Forwarding din\u00e1mico"}]}